//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RuBiz
{
    [DataContract(IsReference = true)]
    public partial class Movimentacao: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id_Movimentacao
        {
            get { return _id_Movimentacao; }
            set
            {
                if (_id_Movimentacao != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id_Movimentacao' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id_Movimentacao = value;
                    OnPropertyChanged("Id_Movimentacao");
                }
            }
        }
        private int _id_Movimentacao;
    
        [DataMember]
        public Nullable<int> Id_Operador
        {
            get { return _id_Operador; }
            set
            {
                if (_id_Operador != value)
                {
                    _id_Operador = value;
                    OnPropertyChanged("Id_Operador");
                }
            }
        }
        private Nullable<int> _id_Operador;
    
        [DataMember]
        public string Nome_Operador
        {
            get { return _nome_Operador; }
            set
            {
                if (_nome_Operador != value)
                {
                    _nome_Operador = value;
                    OnPropertyChanged("Nome_Operador");
                }
            }
        }
        private string _nome_Operador;
    
        [DataMember]
        public Nullable<int> Id_Aluno
        {
            get { return _id_Aluno; }
            set
            {
                if (_id_Aluno != value)
                {
                    _id_Aluno = value;
                    OnPropertyChanged("Id_Aluno");
                }
            }
        }
        private Nullable<int> _id_Aluno;
    
        [DataMember]
        public string Nome_Aluno
        {
            get { return _nome_Aluno; }
            set
            {
                if (_nome_Aluno != value)
                {
                    _nome_Aluno = value;
                    OnPropertyChanged("Nome_Aluno");
                }
            }
        }
        private string _nome_Aluno;
    
        [DataMember]
        public string Data_Movimentacao
        {
            get { return _data_Movimentacao; }
            set
            {
                if (_data_Movimentacao != value)
                {
                    _data_Movimentacao = value;
                    OnPropertyChanged("Data_Movimentacao");
                }
            }
        }
        private string _data_Movimentacao;
    
        [DataMember]
        public string Hora_Movimentacao
        {
            get { return _hora_Movimentacao; }
            set
            {
                if (_hora_Movimentacao != value)
                {
                    _hora_Movimentacao = value;
                    OnPropertyChanged("Hora_Movimentacao");
                }
            }
        }
        private string _hora_Movimentacao;
    
        [DataMember]
        public string Tipo_Movimentacao
        {
            get { return _tipo_Movimentacao; }
            set
            {
                if (_tipo_Movimentacao != value)
                {
                    _tipo_Movimentacao = value;
                    OnPropertyChanged("Tipo_Movimentacao");
                }
            }
        }
        private string _tipo_Movimentacao;
    
        [DataMember]
        public string Campos
        {
            get { return _campos; }
            set
            {
                if (_campos != value)
                {
                    _campos = value;
                    OnPropertyChanged("Campos");
                }
            }
        }
        private string _campos;
    
        [DataMember]
        public string Observacao
        {
            get { return _observacao; }
            set
            {
                if (_observacao != value)
                {
                    _observacao = value;
                    OnPropertyChanged("Observacao");
                }
            }
        }
        private string _observacao;
    
        [DataMember]
        public Nullable<double> Valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("Valor");
                }
            }
        }
        private Nullable<double> _valor;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
