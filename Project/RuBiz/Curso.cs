//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RuBiz
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(InstituicaoEnsino))]
    [KnownType(typeof(Usuario))]
    public partial class Curso: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdCurso
        {
            get { return _idCurso; }
            set
            {
                if (_idCurso != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdCurso' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idCurso = value;
                    OnPropertyChanged("IdCurso");
                }
            }
        }
        private int _idCurso;
    
        [DataMember]
        public string DescricaoCurso
        {
            get { return _descricaoCurso; }
            set
            {
                if (_descricaoCurso != value)
                {
                    _descricaoCurso = value;
                    OnPropertyChanged("DescricaoCurso");
                }
            }
        }
        private string _descricaoCurso;
    
        [DataMember]
        public int Id_Instituicao
        {
            get { return _id_Instituicao; }
            set
            {
                if (_id_Instituicao != value)
                {
                    ChangeTracker.RecordOriginalValue("Id_Instituicao", _id_Instituicao);
                    if (!IsDeserializing)
                    {
                        if (InstituicaoEnsino != null && InstituicaoEnsino.Id_Instituicao != value)
                        {
                            InstituicaoEnsino = null;
                        }
                    }
                    _id_Instituicao = value;
                    OnPropertyChanged("Id_Instituicao");
                }
            }
        }
        private int _id_Instituicao;
    
        [DataMember]
        public int TotalPeriodo
        {
            get { return _totalPeriodo; }
            set
            {
                if (_totalPeriodo != value)
                {
                    _totalPeriodo = value;
                    OnPropertyChanged("TotalPeriodo");
                }
            }
        }
        private int _totalPeriodo;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public InstituicaoEnsino InstituicaoEnsino
        {
            get { return _instituicaoEnsino; }
            set
            {
                if (!ReferenceEquals(_instituicaoEnsino, value))
                {
                    var previousValue = _instituicaoEnsino;
                    _instituicaoEnsino = value;
                    FixupInstituicaoEnsino(previousValue);
                    OnNavigationPropertyChanged("InstituicaoEnsino");
                }
            }
        }
        private InstituicaoEnsino _instituicaoEnsino;
    
        [DataMember]
        public TrackableCollection<Usuario> Usuario
        {
            get
            {
                if (_usuario == null)
                {
                    _usuario = new TrackableCollection<Usuario>();
                    _usuario.CollectionChanged += FixupUsuario;
                }
                return _usuario;
            }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_usuario != null)
                    {
                        _usuario.CollectionChanged -= FixupUsuario;
                    }
                    _usuario = value;
                    if (_usuario != null)
                    {
                        _usuario.CollectionChanged += FixupUsuario;
                    }
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private TrackableCollection<Usuario> _usuario;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InstituicaoEnsino = null;
            Usuario.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupInstituicaoEnsino(InstituicaoEnsino previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Curso.Contains(this))
            {
                previousValue.Curso.Remove(this);
            }
    
            if (InstituicaoEnsino != null)
            {
                if (!InstituicaoEnsino.Curso.Contains(this))
                {
                    InstituicaoEnsino.Curso.Add(this);
                }
    
                Id_Instituicao = InstituicaoEnsino.Id_Instituicao;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InstituicaoEnsino")
                    && (ChangeTracker.OriginalValues["InstituicaoEnsino"] == InstituicaoEnsino))
                {
                    ChangeTracker.OriginalValues.Remove("InstituicaoEnsino");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InstituicaoEnsino", previousValue);
                }
                if (InstituicaoEnsino != null && !InstituicaoEnsino.ChangeTracker.ChangeTrackingEnabled)
                {
                    InstituicaoEnsino.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Usuario item in e.NewItems)
                {
                    item.Curso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Usuario", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Usuario item in e.OldItems)
                {
                    if (ReferenceEquals(item.Curso, this))
                    {
                        item.Curso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Usuario", item);
                    }
                }
            }
        }

        #endregion
    }
}
