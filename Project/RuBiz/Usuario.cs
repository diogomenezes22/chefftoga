//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RuBiz
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cartao))]
    [KnownType(typeof(Curso))]
    [KnownType(typeof(MovtoFinanceira))]
    [KnownType(typeof(TipoUsuario))]
    public partial class Usuario: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id_Usuario
        {
            get { return _id_Usuario; }
            set
            {
                if (_id_Usuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id_Usuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id_Usuario = value;
                    OnPropertyChanged("Id_Usuario");
                }
            }
        }
        private int _id_Usuario;
    
        [DataMember]
        public int Id_TipoUsuario
        {
            get { return _id_TipoUsuario; }
            set
            {
                if (_id_TipoUsuario != value)
                {
                    ChangeTracker.RecordOriginalValue("Id_TipoUsuario", _id_TipoUsuario);
                    if (!IsDeserializing)
                    {
                        if (TipoUsuario != null && TipoUsuario.Id_TipoUsuario != value)
                        {
                            TipoUsuario = null;
                        }
                    }
                    _id_TipoUsuario = value;
                    OnPropertyChanged("Id_TipoUsuario");
                }
            }
        }
        private int _id_TipoUsuario;
    
        [DataMember]
        public string Nome
        {
            get { return _nome; }
            set
            {
                if (_nome != value)
                {
                    _nome = value;
                    OnPropertyChanged("Nome");
                }
            }
        }
        private string _nome;
    
        [DataMember]
        public string RG
        {
            get { return _rG; }
            set
            {
                if (_rG != value)
                {
                    _rG = value;
                    OnPropertyChanged("RG");
                }
            }
        }
        private string _rG;
    
        [DataMember]
        public string CPF
        {
            get { return _cPF; }
            set
            {
                if (_cPF != value)
                {
                    _cPF = value;
                    OnPropertyChanged("CPF");
                }
            }
        }
        private string _cPF;
    
        [DataMember]
        public Nullable<int> Id_Curso
        {
            get { return _id_Curso; }
            set
            {
                if (_id_Curso != value)
                {
                    ChangeTracker.RecordOriginalValue("Id_Curso", _id_Curso);
                    if (!IsDeserializing)
                    {
                        if (Curso != null && Curso.IdCurso != value)
                        {
                            Curso = null;
                        }
                    }
                    _id_Curso = value;
                    OnPropertyChanged("Id_Curso");
                }
            }
        }
        private Nullable<int> _id_Curso;
    
        [DataMember]
        public string Logradouro
        {
            get { return _logradouro; }
            set
            {
                if (_logradouro != value)
                {
                    _logradouro = value;
                    OnPropertyChanged("Logradouro");
                }
            }
        }
        private string _logradouro;
    
        [DataMember]
        public string Numero
        {
            get { return _numero; }
            set
            {
                if (_numero != value)
                {
                    _numero = value;
                    OnPropertyChanged("Numero");
                }
            }
        }
        private string _numero;
    
        [DataMember]
        public string Bairro
        {
            get { return _bairro; }
            set
            {
                if (_bairro != value)
                {
                    _bairro = value;
                    OnPropertyChanged("Bairro");
                }
            }
        }
        private string _bairro;
    
        [DataMember]
        public string Cidade
        {
            get { return _cidade; }
            set
            {
                if (_cidade != value)
                {
                    _cidade = value;
                    OnPropertyChanged("Cidade");
                }
            }
        }
        private string _cidade;
    
        [DataMember]
        public string UF
        {
            get { return _uF; }
            set
            {
                if (_uF != value)
                {
                    _uF = value;
                    OnPropertyChanged("UF");
                }
            }
        }
        private string _uF;
    
        [DataMember]
        public string CEP
        {
            get { return _cEP; }
            set
            {
                if (_cEP != value)
                {
                    _cEP = value;
                    OnPropertyChanged("CEP");
                }
            }
        }
        private string _cEP;
    
        [DataMember]
        public string Fone
        {
            get { return _fone; }
            set
            {
                if (_fone != value)
                {
                    _fone = value;
                    OnPropertyChanged("Fone");
                }
            }
        }
        private string _fone;
    
        [DataMember]
        public Nullable<bool> Bolsista
        {
            get { return _bolsista; }
            set
            {
                if (_bolsista != value)
                {
                    _bolsista = value;
                    OnPropertyChanged("Bolsista");
                }
            }
        }
        private Nullable<bool> _bolsista;
    
        [DataMember]
        public string Senha
        {
            get { return _senha; }
            set
            {
                if (_senha != value)
                {
                    _senha = value;
                    OnPropertyChanged("Senha");
                }
            }
        }
        private string _senha;
    
        [DataMember]
        public Nullable<int> Periodo
        {
            get { return _periodo; }
            set
            {
                if (_periodo != value)
                {
                    _periodo = value;
                    OnPropertyChanged("Periodo");
                }
            }
        }
        private Nullable<int> _periodo;
    
        [DataMember]
        public Nullable<System.DateTime> DataNascimento
        {
            get { return _dataNascimento; }
            set
            {
                if (_dataNascimento != value)
                {
                    _dataNascimento = value;
                    OnPropertyChanged("DataNascimento");
                }
            }
        }
        private Nullable<System.DateTime> _dataNascimento;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Cartao> Cartao
        {
            get
            {
                if (_cartao == null)
                {
                    _cartao = new TrackableCollection<Cartao>();
                    _cartao.CollectionChanged += FixupCartao;
                }
                return _cartao;
            }
            set
            {
                if (!ReferenceEquals(_cartao, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cartao != null)
                    {
                        _cartao.CollectionChanged -= FixupCartao;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Cartao item in _cartao)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cartao = value;
                    if (_cartao != null)
                    {
                        _cartao.CollectionChanged += FixupCartao;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Cartao item in _cartao)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Cartao");
                }
            }
        }
        private TrackableCollection<Cartao> _cartao;
    
        [DataMember]
        public Curso Curso
        {
            get { return _curso; }
            set
            {
                if (!ReferenceEquals(_curso, value))
                {
                    var previousValue = _curso;
                    _curso = value;
                    FixupCurso(previousValue);
                    OnNavigationPropertyChanged("Curso");
                }
            }
        }
        private Curso _curso;
    
        [DataMember]
        public TrackableCollection<MovtoFinanceira> MovtoFinanceira
        {
            get
            {
                if (_movtoFinanceira == null)
                {
                    _movtoFinanceira = new TrackableCollection<MovtoFinanceira>();
                    _movtoFinanceira.CollectionChanged += FixupMovtoFinanceira;
                }
                return _movtoFinanceira;
            }
            set
            {
                if (!ReferenceEquals(_movtoFinanceira, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_movtoFinanceira != null)
                    {
                        _movtoFinanceira.CollectionChanged -= FixupMovtoFinanceira;
                    }
                    _movtoFinanceira = value;
                    if (_movtoFinanceira != null)
                    {
                        _movtoFinanceira.CollectionChanged += FixupMovtoFinanceira;
                    }
                    OnNavigationPropertyChanged("MovtoFinanceira");
                }
            }
        }
        private TrackableCollection<MovtoFinanceira> _movtoFinanceira;
    
        [DataMember]
        public TipoUsuario TipoUsuario
        {
            get { return _tipoUsuario; }
            set
            {
                if (!ReferenceEquals(_tipoUsuario, value))
                {
                    var previousValue = _tipoUsuario;
                    _tipoUsuario = value;
                    FixupTipoUsuario(previousValue);
                    OnNavigationPropertyChanged("TipoUsuario");
                }
            }
        }
        private TipoUsuario _tipoUsuario;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Cartao.Clear();
            Curso = null;
            MovtoFinanceira.Clear();
            TipoUsuario = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCurso(Curso previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Usuario.Contains(this))
            {
                previousValue.Usuario.Remove(this);
            }
    
            if (Curso != null)
            {
                if (!Curso.Usuario.Contains(this))
                {
                    Curso.Usuario.Add(this);
                }
    
                Id_Curso = Curso.IdCurso;
            }
            else if (!skipKeys)
            {
                Id_Curso = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Curso")
                    && (ChangeTracker.OriginalValues["Curso"] == Curso))
                {
                    ChangeTracker.OriginalValues.Remove("Curso");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Curso", previousValue);
                }
                if (Curso != null && !Curso.ChangeTracker.ChangeTrackingEnabled)
                {
                    Curso.StartTracking();
                }
            }
        }
    
        private void FixupTipoUsuario(TipoUsuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Usuario.Contains(this))
            {
                previousValue.Usuario.Remove(this);
            }
    
            if (TipoUsuario != null)
            {
                if (!TipoUsuario.Usuario.Contains(this))
                {
                    TipoUsuario.Usuario.Add(this);
                }
    
                Id_TipoUsuario = TipoUsuario.Id_TipoUsuario;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoUsuario")
                    && (ChangeTracker.OriginalValues["TipoUsuario"] == TipoUsuario))
                {
                    ChangeTracker.OriginalValues.Remove("TipoUsuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoUsuario", previousValue);
                }
                if (TipoUsuario != null && !TipoUsuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoUsuario.StartTracking();
                }
            }
        }
    
        private void FixupCartao(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Cartao item in e.NewItems)
                {
                    item.Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Cartao", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cartao item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Cartao", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupMovtoFinanceira(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MovtoFinanceira item in e.NewItems)
                {
                    item.Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MovtoFinanceira", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MovtoFinanceira item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MovtoFinanceira", item);
                    }
                }
            }
        }

        #endregion
    }
}
